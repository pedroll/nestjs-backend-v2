// Generated by Qodo Gen

import { translateUseCase } from './translate.use-case';
import OpenAI from 'openai';
import { TranslateDto } from '../../dto';

describe('translateUseCase', () => {
  // Successfully translates text when valid prompt and language are provided
  it('should return translated text when valid prompt and language are provided', async () => {
    // Arrange
    const mockOpenAi = {
      responses: {
        create: jest.fn().mockResolvedValue({
          output_text: 'Translated text in Spanish',
          other_info: 'some data',
        }),
      },
    } as unknown as OpenAI;

    const translateDto: TranslateDto = {
      prompt: 'Hello world',
      lang: 'Spanish',
    };

    // Act
    const result = await translateUseCase(mockOpenAi, translateDto);

    // Assert
    expect(mockOpenAi.responses.create).toHaveBeenCalledWith({
      model: 'gpt-4.1-nano',
      input: [
        {
          role: 'system',
          content: expect.stringContaining('Spanish'),
        },
        {
          role: 'user',
          content: 'Hello world',
        },
      ],
      max_output_tokens: 200,
      temperature: 0.2,
    });

    expect(result).toEqual({
      message: 'Translated text in Spanish',
      info: {
        output_text: 'Translated text in Spanish',
        other_info: 'some data',
      },
    });
  });

  // Handles empty prompt string
  it('should process empty prompt string without errors', async () => {
    // Arrange
    const mockOpenAi = {
      responses: {
        create: jest.fn().mockResolvedValue({
          output_text: 'Empty input',
          other_info: 'some data',
        }),
      },
    } as unknown as OpenAI;

    const translateDto: TranslateDto = {
      prompt: '',
      lang: 'French',
    };

    // Act
    const result = await translateUseCase(mockOpenAi, translateDto);

    // Assert
    expect(mockOpenAi.responses.create).toHaveBeenCalledWith({
      model: 'gpt-4.1-nano',
      input: [
        {
          role: 'system',
          content: expect.stringContaining('French'),
        },
        {
          role: 'user',
          content: '',
        },
      ],
      max_output_tokens: 200,
      temperature: 0.2,
    });

    expect(result).toEqual({
      message: 'Empty input',
      info: {
        output_text: 'Empty input',
        other_info: 'some data',
      },
    });
  });
});
