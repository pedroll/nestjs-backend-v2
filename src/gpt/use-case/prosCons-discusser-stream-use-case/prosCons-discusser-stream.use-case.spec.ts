// Generated by Qodo Gen

import { prosConsDiscusserStreamUseCase } from './prosCons-discusser-stream.use-case';
import OpenAI from 'openai';

describe('prosConsDiscusserStreamUseCase', () => {
  // Function returns a streaming response from OpenAI when given valid parameters
  it('should return a streaming response from OpenAI when given valid parameters', async () => {
    // Arrange
    const mockOpenAi = {
      chat: {
        completions: {
          create: jest.fn().mockResolvedValue({ id: 'mock-stream-id' }),
        },
      },
    } as unknown as OpenAI;

    const options = { prompt: 'Should I learn TypeScript?' };

    // Act
    const result = await prosConsDiscusserStreamUseCase(mockOpenAi, options);

    // Assert
    expect(mockOpenAi.chat.completions.create).toHaveBeenCalledWith({
      stream: true,
      model: 'gpt-4.1-nano',
      messages: [
        {
          role: 'system',
          content: expect.stringContaining('Se te dará una pregunta'),
        },
        {
          role: 'user',
          content: 'Should I learn TypeScript?',
        },
      ],
      temperature: 0.8,
      max_completion_tokens: 500,
    });

    expect(result).toEqual({ id: 'mock-stream-id' });
  });

  // Handling empty prompt strings
  it('should handle empty prompt strings correctly', async () => {
    // Arrange
    const mockOpenAi = {
      chat: {
        completions: {
          create: jest.fn().mockResolvedValue({ id: 'mock-stream-id' }),
        },
      },
    } as unknown as OpenAI;

    const options = { prompt: '' };

    // Act
    const result = await prosConsDiscusserStreamUseCase(mockOpenAi, options);

    // Assert
    expect(mockOpenAi.chat.completions.create).toHaveBeenCalledWith({
      stream: true,
      model: 'gpt-4.1-nano',
      messages: [
        {
          role: 'system',
          content: expect.stringContaining('Se te dará una pregunta'),
        },
        {
          role: 'user',
          content: '',
        },
      ],
      temperature: 0.8,
      max_completion_tokens: 500,
    });

    expect(result).toEqual({ id: 'mock-stream-id' });
  });
});
