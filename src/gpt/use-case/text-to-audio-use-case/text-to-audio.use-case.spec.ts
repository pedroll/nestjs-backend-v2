// Generated by Qodo Gen

import { textToAudioUseCase } from './text-to-audio.use-case';
import OpenAI from 'openai';
import { TextToAudioDto } from '../../dto';
// Import the mocked modules
import * as fs from 'node:fs';

// Mock the fs and path modules
jest.mock('node:fs', () => ({
  mkdirSync: jest.fn(),
  writeFileSync: jest.fn(),
}));

jest.mock('node:path', () => ({
  resolve: jest.fn().mockReturnValue('/mock/path'),
  join: jest.fn().mockReturnValue('/mock/path/file.mp3'),
}));

describe('textToAudioUseCase', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });
  // Successfully converts text to audio with default 'nova' voice
  it('should convert text to audio with default nova voice when no voice is specified', async () => {
    // Arrange
    const mockOpenAi = {
      audio: {
        speech: {
          create: jest.fn().mockResolvedValue({
            arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(8)),
          }),
        },
      },
    } as unknown as OpenAI;

    const textToAudioDto: TextToAudioDto = {
      prompt: 'Hello world',
    };

    // Act
    const result = await textToAudioUseCase(mockOpenAi, textToAudioDto);

    // Assert
    expect(mockOpenAi.audio.speech.create).toHaveBeenCalledWith({
      model: 'tts-1',
      voice: 'nova',
      input: 'Hello world',
      response_format: 'mp3',
    });

    expect(fs.writeFileSync).toHaveBeenCalled();
    expect(result).toBe('/mock/path/file.mp3');
  });

  // Handles invalid voice parameter by defaulting to 'nova'
  it('should default to nova voice when invalid voice parameter is provided', async () => {
    // Arrange
    const mockOpenAi = {
      audio: {
        speech: {
          create: jest.fn().mockResolvedValue({
            arrayBuffer: jest.fn().mockResolvedValue(new ArrayBuffer(8)),
          }),
        },
      },
    } as unknown as OpenAI;

    const textToAudioDto: TextToAudioDto = {
      prompt: 'Hello world',
      voice: 'invalid_voice',
    };

    // Act
    const result = await textToAudioUseCase(mockOpenAi, textToAudioDto);

    // Assert
    expect(mockOpenAi.audio.speech.create).toHaveBeenCalledWith({
      model: 'tts-1',
      voice: 'nova',
      input: 'Hello world',
      response_format: 'mp3',
    });

    expect(fs.writeFileSync).toHaveBeenCalled();
    expect(result).toBe('/mock/path/file.mp3');
  });
});
